* Serial port settings
 
Commands are sent via serial port, 9600 8N1, hardware (CTR/CTS) +
software flow (XON/XOFF) control, but handshake seems to be ignored,
in fact a special protocol is used.

* Communication protocol

The protocol is the following:

- send a command
- read "command accepted" return code
- busy wait until "command finished" return code
- clear flag, basically acknowledges that you noticed the command is
  done.

* Start and stop code

All communication messages are encapsulated in 0xFF0x02<message>0x0D.

* Command syntax

The format is 

0xFF0x02A<address><command>0x03<checksum>0x0D

Checksum:

#+BEGIN_EXAMPLE
s="\xFF\x02A18PA 29 29 29"
chk=ord(s[1]);

for c in s[2:len(s)]:
    chk=chk ^ ord(c)

chk = chk ^ 0x03
print "%s\x03%c\x0d" % (s,chk)
#+END_EXAMPLE

* Addresses

The address can be one of the following:

- 18 for arm 1 (left)
- 11 for syringe 1 (left)
- 12 for syringe 2 (right)
- 28 for arm 2 (right)

* Return codes

The return code is of the following form:

<address>x<diagnostic messages>

where x is one of:

- @: command accepted
- A: error, for example when position is out of range
- Q: information messages

There are several other return codes (e.g. Y) that have not been
reverse-enginered.

* Clear flag command

To end the sequence, send @<address>.

* Possible Commands

- PI: initialize arm, needs to be done before first use
- SP0: set position recovery
- SA x y z s: set position range of arm
- PA x y z: arm goto position
- Sx Ay d R: set syringe speed x (1-20), position y (0-2000),
  direction of valve d (I for input, O for output) 



